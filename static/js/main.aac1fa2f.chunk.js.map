{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Form/Form.js","components/Filters/Filters.js","App.js","index.js"],"names":["TodoItem","state","e","_this$props","this","props","id","title","completed","destroyTodo","changeStatus","react_default","a","createElement","className","type","name","checked","onChange","htmlFor","onClick","React","Component","TodoList","_ref","todos","changeStatusAll","handleEdit","style","display","map","todo","components_TodoItem_TodoItem","todoTitle","key","Form","onEnterDown","event","_this","AddTodo","shortid","generate","setState","_this2","value","placeholder","target","onKeyDown","Filters","active","nonCompletedCount","href","allTodosToShowSorting","onFocus","nonCompletedTodosSorting","completedTodosSorting","completedAppears","App","todoList","todoListOriginal","completedAll","inputFormValue","prevState","concat","Object","toConsumableArray","idTodoToDestroy","filter","idTodoToChange","_objectSpread","count","length","components_Form_Form","components_TodoList_TodoList","components_Filters_Filters","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.aac1fa2f.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoItem extends React.Component {\n  state = {\n    e: 1,\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      destroyTodo,\n      changeStatus,\n    } = this.props;\n\n    return (\n      <li className={completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            name={id}\n            id={id}\n            checked={completed}\n            onChange={() => changeStatus(id)}\n          />\n          <label htmlFor={id}>{title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => destroyTodo(id)}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React from 'react';\n\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({\n  todos, destroyTodo, changeStatus, changeStatusAll, handleEdit,\n}) => (\n  <section className=\"main\" style={{ display: 'block' }}>\n    <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n    <label onClick={changeStatusAll} htmlFor=\"toggle-all\">Mark all as complete</label>\n    <ul className=\"todo-list\">\n      { todos.map(todo => (\n        <TodoItem\n          handleEdit={handleEdit}\n          changeStatus={changeStatus}\n          destroyTodo={destroyTodo}\n          title={todo.todoTitle}\n          completed={todo.completed}\n          key={todo.id}\n          id={todo.id}\n          todo={todo}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nexport default TodoList;\n","import React from 'react';\nimport shortid from 'shortid';\n\nclass Form extends React.Component {\n  state = {\n    todoTitle: '',\n    id: '',\n  }\n\n  onEnterDown = (event) => {\n    if (event.key === 'Enter') {\n      if (this.state.todoTitle) {\n        this.props.AddTodo({\n          todoTitle: this.state.todoTitle,\n          id: shortid.generate(),\n          completed: false,\n        });\n        this.setState({ todoTitle: '' });\n      }\n    }\n  }\n\n  render() {\n    const { todoTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <input\n          value={todoTitle}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={event => this.setState({ todoTitle: event.target.value })}\n          onKeyDown={this.onEnterDown}\n        />\n      </header>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nclass Filters extends React.Component {\n  state = {\n    active: '',\n  }\n\n  render() {\n    const { active } = this.state;\n\n    return (\n      <footer className=\"footer\" style={{ display: 'block' }}>\n        <span className=\"todo-count\">\n          {this.props.nonCompletedCount()}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              className={active === 1 ? 'selected' : ''}\n              href=\"#/\"\n              onClick={this.props.allTodosToShowSorting}\n              onFocus={() => this.setState({ active: 1 })}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={active === 2 ? 'selected' : ''}\n              href=\"#/active\"\n              onClick={this.props.nonCompletedTodosSorting}\n              onFocus={() => this.setState({ active: 2 })}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={active === 3 ? 'selected' : ''}\n              href=\"#/completed\"\n              onClick={this.props.completedTodosSorting}\n              onFocus={() => this.setState({ active: 3 })}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          style={{ display: 'block' }}\n          onClick={this.props.nonCompletedCount}\n        >\n          {this.props.completedAppears() && 'Clear completed' }\n        </button>\n      </footer>\n    );\n  }\n}\n\nexport default Filters;\n","import React from 'react';\n\nimport TodoList from './components/TodoList/TodoList';\nimport Form from './components/Form/Form';\nimport Filters from './components/Filters/Filters';\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    todoListOriginal: [],\n    completedAll: 0,\n  }\n\n  AddTodo = (inputFormValue) => {\n    this.setState(prevState => ({\n      todoListOriginal: [\n        ...prevState.todoListOriginal,\n        inputFormValue,\n      ],\n      todoList: [\n        ...prevState.todoListOriginal,\n        inputFormValue,\n      ],\n    }));\n  }\n\n  destroyTodo = (idTodoToDestroy) => {\n    this.setState(prevState => ({\n      todoList: prevState.todoList.filter(todo => todo.id !== idTodoToDestroy),\n    }));\n  }\n\n  changeStatus = (idTodoToChange) => {\n    this.setState(prevState => ({\n      todoListOriginal: prevState.todoListOriginal.map(todo => (\n        todo.id !== idTodoToChange\n          ? todo\n          : {\n            ...todo,\n            completed: !todo.completed,\n          }\n      )),\n      todoList: prevState.todoList.map(todo => (\n        todo.id !== idTodoToChange\n          ? todo\n          : {\n            ...todo,\n            completed: !todo.completed,\n          }\n      )),\n    }));\n  }\n\n  changeStatusAll = () => {\n    this.setState(prevState => (\n      prevState.completedAll === 0\n        ? {\n          todoList: prevState.todoList.map(todo => (\n            {\n              ...todo,\n              completed: true,\n            }\n          )),\n          completedAll: 1,\n        }\n        : {\n          todoList: prevState.todoList.map(todo => (\n            {\n              ...todo,\n              completed: false,\n            }\n          )),\n          completedAll: 0,\n        }\n    ));\n  }\n\n  nonCompletedCount = (e) => {\n    const count = this.state.todoList\n      .filter(todo => todo.completed !== true);\n\n    if (e) {\n      this.setState({\n        todoList: count,\n      });\n    }\n\n    if (count.length) {\n      return `${count.length} todos left`;\n    }\n\n    return false;\n  }\n\n  completedAppears = () => {\n    const arr = this.state.todoList\n      .filter(todo => todo.completed === true);\n\n    return !!arr.length;\n  }\n\n  nonCompletedTodosSorting = () => {\n    this.setState(prevState => ({\n      todoList: prevState.todoListOriginal\n        .filter(todo => todo.completed !== true),\n    }));\n  }\n\n  completedTodosSorting = () => {\n    this.setState(prevState => ({\n      todoList: prevState.todoListOriginal\n        .filter(todo => todo.completed === true),\n    }));\n  }\n\n  allTodosToShowSorting = () => {\n    this.setState({\n      todoList: this.state.todoListOriginal,\n    });\n  }\n\n  render() {\n    const { todoList } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Form AddTodo={this.AddTodo} />\n        <TodoList\n          handleEdit={this.handleEdit}\n          changeStatusAll={this.changeStatusAll}\n          changeStatus={this.changeStatus}\n          destroyTodo={this.destroyTodo}\n          todos={todoList}\n        />\n        <Filters\n          completedAppears={this.completedAppears}\n          allTodosToShowSorting={this.allTodosToShowSorting}\n          nonCompletedCount={this.nonCompletedCount}\n          nonCompletedTodosSorting={this.nonCompletedTodosSorting}\n          completedTodosSorting={this.completedTodosSorting}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}